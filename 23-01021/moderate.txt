#include <iostream>
#include <bits/stdc++.h>
using namespace std;

template<class t>
class Node{

    private:
        t data;
        Node *next;

    public:
        Node(){
            next = NULL;
        }

        Node(t data){
            this->data = data;
            next = NULL;
        }

        t getdata(){
            return this->data;
        }

        void setnext(Node * next){
            this->next = next;

        }

        Node* getnext(){
            return this->next;
        }
};

template<class T>
class linklist{
    private:
    Node<T> *head;
    public:
        linklist(){
            this->head = NULL;
        }

        Node<T>* gethead(){
            return this->head;
        }

        void InsertE(T data){
            Node<T> *node = new Node<T>(data);

            if(head ==NULL){
                head = node;
            }
            else{
                Node<T> *temp = head;
                while(temp->getnext()!= NULL){
                        temp = temp->getnext();
                }
                temp->setnext(node);
            }
        }

        void InsertB(T data){
            Node<T> *node = new Node<T>(data);
            if(head ==NULL){
                head = node;
            }
            else{

                node->setnext(head);
                head = node;
            }

        }

        void InsertBetween(T tobe, T after){
            Node<T> *node = new Node<T>(tobe);
            if(head == NULL){
                head = node;
            }
            else{
                Node<T> *temp = head;
                while(temp->getdata()!=after || temp->getnext() != NULL){
                    temp = temp->getnext();
                }
                if(temp->getnext() == NULL){
                    cout<<"data not found!!!";
                    return;
                }
                else{
                    node->setnext(temp->getnext());
                    temp->setnext(node);
                }
            }
        }

        T deleteE(){
            Node<T> *temp = head;
            while(temp->getnext()->getnext() !=NULL){
                temp = temp->getnext();
            }

            int a = temp->getnext()->getdata();
             temp->setnext(NULL);
            //delete [] temp;
            return a;

        }

        T deleteB(){
            Node<T> *temp = head;
            head = head->getnext();
            int a = temp->getdata();
            delete [] temp;
            return a;

        }

        T deleteBetweeen(T after){
            Node<T> *temp = head;
            if(temp->getdata()==after){
                int a = temp->getdata();
                if(temp->getnext()!=NULL){

                    head = head->getnext();
                }

                 delete [] temp;
                 return a;
            }
            else{

            while(temp->getnext()!=NULL || temp->getnext()->getdata() !=after){
                temp = temp->getnext();
            }

            if(temp->getnext()== NULL ){
                cout<<"data not found!!"<<endl;
                return 0;
                }
            else{
                int a = temp->getnext()->getdata();
                if(temp->getnext()->getnext()!=NULL){
                    temp->setnext(temp->getnext()->getnext());
                }
                else{
                    temp->setnext(NULL);
                }
                return a;
            }
            }

        }

        void printdata(){
            Node<T> *temp=head;
            while(temp!=NULL){
                cout<<temp->getdata()<<" ";
                temp = temp->getnext();
            }
            cout<<endl;
        }

        T findmelement(){
            Node<T> *temp = head;
            Node<T> *prev = head;
            if(temp->getnext()==NULL){
                return temp->getdata();
            }

            else if(temp->getnext()->getnext()==NULL){
                    int a = prev->getnext()->getdata();
                return a;
            }

            else{
            while(temp->getnext()!=NULL){

                temp = temp->getnext()->getnext();
                prev = prev->getnext();
            }
            T a = prev->getdata();
            return a;
            }
        }

        bool detectloop(){
            Node<T> * temp=head;
            unordered_set<Node<T> *>s1;
           while(temp->getnext() != NULL){

             if(s1.find(temp) !=s1.end()){
                return true;
             }
             else{
                s1.insert(temp);
                temp= temp->getnext();
             }

           }

             return false;

        }